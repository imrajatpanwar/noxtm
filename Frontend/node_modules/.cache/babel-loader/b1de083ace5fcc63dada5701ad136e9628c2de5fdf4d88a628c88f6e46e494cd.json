{"ast":null,"code":"var _jsxFileName = \"C:\\\\exe\\\\noxtmstudio\\\\Frontend\\\\src\\\\contexts\\\\RoleContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useState, useEffect, useCallback, useRef } from 'react';\nimport api from '../config/api';\nimport { toast } from 'sonner';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst RoleContext = /*#__PURE__*/createContext();\nexport const useRole = () => {\n  _s();\n  const context = useContext(RoleContext);\n  if (!context) {\n    throw new Error('useRole must be used within a RoleProvider');\n  }\n  return context;\n};\n\n// Define available modules/sections\n_s(useRole, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nexport const MODULES = {\n  DASHBOARD: 'dashboard',\n  DATA_CENTER: 'dataCenter',\n  PROJECTS: 'projects',\n  DIGITAL_MEDIA: 'digitalMediaManagement',\n  TEAM_COMMUNICATION: 'teamCommunication',\n  MARKETING: 'marketing',\n  HR_MANAGEMENT: 'hrManagement',\n  FINANCE_MANAGEMENT: 'financeManagement',\n  SEO_MANAGEMENT: 'seoManagement',\n  INTERNAL_POLICIES: 'internalPolicies',\n  SETTINGS_CONFIG: 'settingsConfiguration'\n};\n\n// Simplified: No default role permissions - all permissions are manual\n\nexport const RoleProvider = ({\n  children\n}) => {\n  _s2();\n  const [userPermissions, setUserPermissions] = useState({});\n  const [users, setUsers] = useState([]);\n  const [currentUser, setCurrentUser] = useState(null);\n  const [permissionUpdateTrigger, setPermissionUpdateTrigger] = useState(0);\n  const [isCheckingPermissions, setIsCheckingPermissions] = useState(false);\n  const permissionCheckInterval = useRef(null);\n  const lastPermissionHash = useRef(null);\n\n  // Fetch users from backend\n  const fetchUsersFromBackend = async () => {\n    try {\n      const token = localStorage.getItem('token');\n      if (!token) return null;\n      const response = await api.get('/users');\n      console.log('Fetched users from backend:', response.data.users);\n\n      // Transform backend data to match frontend format\n      const transformedUsers = response.data.users.map(user => {\n        // Get default permissions for the user's role\n        const roleDefaultPermissions = [user.role] || {};\n\n        // Merge backend permissions with role defaults\n        // Backend permissions override role defaults\n        const mergedPermissions = {\n          ...roleDefaultPermissions\n        };\n\n        // Apply user-specific permissions from backend\n        if (user.permissions) {\n          Object.keys(user.permissions).forEach(key => {\n            // Only override if the permission is explicitly set in backend\n            if (user.permissions[key] !== undefined && user.permissions[key] !== null) {\n              mergedPermissions[key] = user.permissions[key];\n            }\n          });\n        }\n        return {\n          id: user._id,\n          name: user.username,\n          email: user.email,\n          role: user.role,\n          status: user.role === 'User' ? 'In Review' : user.status || 'Active',\n          access: user.access || [],\n          permissions: mergedPermissions\n        };\n      });\n      console.log('Transformed users:', transformedUsers);\n      return transformedUsers;\n    } catch (error) {\n      console.error('Error fetching users from backend:', error);\n      return null;\n    }\n  };\n\n  // Generate hash of current user permissions for change detection\n  const generatePermissionHash = useCallback(user => {\n    var _users$find;\n    if (!user) return null;\n    const userPermissions = ((_users$find = users.find(u => u.id === user.id)) === null || _users$find === void 0 ? void 0 : _users$find.permissions) || {};\n    return JSON.stringify({\n      role: user.role,\n      permissions: userPermissions\n    });\n  }, [users]);\n\n  // Check current user permissions from backend\n  const checkCurrentUserPermissions = useCallback(async () => {\n    if (!currentUser || isCheckingPermissions) return;\n    setIsCheckingPermissions(true);\n    try {\n      const response = await api.get('/profile');\n      const updatedUser = response.data;\n\n      // Update current user data\n      setCurrentUser(updatedUser);\n      localStorage.setItem('user', JSON.stringify(updatedUser));\n\n      // Fetch updated users list to get latest permissions\n      const usersResponse = await api.get('/users');\n      if (usersResponse.data && usersResponse.data.users) {\n        const transformedUsers = usersResponse.data.users.map(user => ({\n          id: user._id,\n          name: user.username,\n          email: user.email,\n          role: user.role,\n          status: user.role === 'User' ? 'In Review' : user.status || 'Active',\n          access: user.access || [],\n          permissions: user.permissions || {}\n        }));\n\n        // Check if current user's permissions changed\n        const newHash = generatePermissionHash(updatedUser);\n        const oldHash = lastPermissionHash.current;\n        if (oldHash && newHash && oldHash !== newHash) {\n          // Permissions changed - notify user and trigger re-render\n          toast.success('Your permissions have been updated!', {\n            description: 'Your access levels have been modified by an administrator.',\n            duration: 5000\n          });\n          setPermissionUpdateTrigger(prev => prev + 1);\n        }\n        lastPermissionHash.current = newHash;\n        setUsers(transformedUsers);\n        localStorage.setItem('usersData', JSON.stringify(transformedUsers));\n      }\n    } catch (error) {\n      console.error('Error checking user permissions:', error);\n      // Don't show error toast for permission checks to avoid spam\n    } finally {\n      setIsCheckingPermissions(false);\n    }\n  }, [currentUser, isCheckingPermissions, generatePermissionHash]);\n\n  // Load user data from localStorage or API\n  useEffect(() => {\n    const loadUserData = async () => {\n      const userData = JSON.parse(localStorage.getItem('user') || '{}');\n      setCurrentUser(userData);\n\n      // Get user's role permissions\n      if (userData.role) {\n        const permissions = [userData.role] || {};\n        setUserPermissions(permissions);\n      }\n\n      // Try to fetch from backend first\n      const backendUsers = await fetchUsersFromBackend();\n      if (backendUsers && backendUsers.length > 0) {\n        setUsers(backendUsers);\n        localStorage.setItem('usersData', JSON.stringify(backendUsers));\n\n        // Set initial permission hash\n        if (userData.id) {\n          lastPermissionHash.current = generatePermissionHash(userData);\n        }\n      } else {\n        // Fall back to local data\n        const storedUsers = JSON.parse(localStorage.getItem('usersData') || '[]');\n        setUsers(storedUsers);\n      }\n    };\n    loadUserData();\n  }, [generatePermissionHash]);\n\n  // Set up real-time permission checking\n  useEffect(() => {\n    if (!currentUser) return;\n\n    // Start permission checking interval (every 30 seconds)\n    permissionCheckInterval.current = setInterval(() => {\n      checkCurrentUserPermissions();\n    }, 30000);\n\n    // Cleanup interval on unmount or user change\n    return () => {\n      if (permissionCheckInterval.current) {\n        clearInterval(permissionCheckInterval.current);\n      }\n    };\n  }, [currentUser, checkCurrentUserPermissions]);\n\n  // Check if user has permission for a module\n  const hasPermission = useCallback(module => {\n    var _users$find2;\n    if (!currentUser || !currentUser.role) return false;\n\n    // Admin has access to everything\n    if (currentUser.role === 'Admin') return true;\n\n    // Check specific user permissions (overrides)\n    const userSpecificPermissions = (_users$find2 = users.find(u => u.id === currentUser.id)) === null || _users$find2 === void 0 ? void 0 : _users$find2.permissions;\n    if (userSpecificPermissions && userSpecificPermissions.hasOwnProperty(module)) {\n      return userSpecificPermissions[module];\n    }\n\n    // Check default role permissions\n    return userPermissions[module] || false;\n  }, [currentUser, users, userPermissions]); // Remove permissionUpdateTrigger as it's not directly used\n\n  // Update user permissions (admin function)\n  const updateUserPermissions = async (userId, permissions) => {\n    try {\n      const token = localStorage.getItem('token');\n      if (token) {\n        // Update on backend - send permissions directly\n        await api.put(`/users/${userId}/permissions`, permissions);\n      }\n\n      // Update local state\n      const updatedUsers = users.map(user => {\n        if ((user._id || user.id) === userId) {\n          return {\n            ...user,\n            permissions: {\n              ...user.permissions,\n              ...permissions\n            }\n          };\n        }\n        return user;\n      });\n      setUsers(updatedUsers);\n      localStorage.setItem('usersData', JSON.stringify(updatedUsers));\n      return {\n        success: true\n      };\n    } catch (error) {\n      var _error$response, _error$response$data;\n      console.error('Error updating user permissions:', error);\n      return {\n        success: false,\n        error: ((_error$response = error.response) === null || _error$response === void 0 ? void 0 : (_error$response$data = _error$response.data) === null || _error$response$data === void 0 ? void 0 : _error$response$data.message) || error.message\n      };\n    }\n  };\n\n  // Get user permissions\n  const getUserPermissions = userId => {\n    const user = users.find(u => (u._id || u.id) === userId);\n    return user ? user.permissions : {};\n  };\n\n  // Update user role (admin function)\n  const updateUserRole = async (userId, newRole, newStatus = null) => {\n    try {\n      const token = localStorage.getItem('token');\n\n      // Check if we're using demo data (string IDs) vs real backend data (ObjectIds)\n      const isDemoData = typeof userId === 'string' && /^[0-9]+$/.test(userId);\n      if (token && !isDemoData) {\n        // Try to update on backend first (only for real backend data)\n        try {\n          const updateData = {\n            role: newRole\n          };\n          if (newStatus) {\n            updateData.status = newStatus;\n          }\n          await api.put(`/users/${userId}`, updateData);\n        } catch (apiError) {\n          var _apiError$response;\n          // If the endpoint doesn't exist (404), log and continue with local update\n          if (((_apiError$response = apiError.response) === null || _apiError$response === void 0 ? void 0 : _apiError$response.status) === 404) {\n            console.log('User update endpoint not found, updating locally only');\n            // The local state will still be updated below\n          } else {\n            throw apiError; // Re-throw if it's a different error\n          }\n        }\n      }\n\n      // Update local state\n      const updatedUsers = users.map(user => {\n        if (user.id === userId) {\n          const updatedUser = {\n            ...user,\n            role: newRole\n          };\n          if (newStatus) {\n            updatedUser.status = newStatus;\n          }\n          return updatedUser;\n        }\n        return user;\n      });\n      setUsers(updatedUsers);\n      localStorage.setItem('usersData', JSON.stringify(updatedUsers));\n      return {\n        success: true\n      };\n    } catch (error) {\n      var _error$response2, _error$response2$data;\n      console.error('Error updating user role:', error);\n\n      // Still update locally as fallback\n      const updatedUsers = users.map(user => {\n        if (user.id === userId) {\n          const updatedUser = {\n            ...user,\n            role: newRole\n          };\n          if (newStatus) {\n            updatedUser.status = newStatus;\n          }\n          return updatedUser;\n        }\n        return user;\n      });\n      setUsers(updatedUsers);\n      localStorage.setItem('usersData', JSON.stringify(updatedUsers));\n      return {\n        success: false,\n        error: ((_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : (_error$response2$data = _error$response2.data) === null || _error$response2$data === void 0 ? void 0 : _error$response2$data.message) || error.message\n      };\n    }\n  };\n\n  // Get all users with their permissions\n  const getAllUsersWithPermissions = () => {\n    return users.map(user => ({\n      ...user,\n      permissions: user.permissions || {}\n    }));\n  };\n  const value = {\n    currentUser,\n    userPermissions,\n    users,\n    hasPermission,\n    updateUserRole,\n    updateUserPermissions,\n    getUserPermissions,\n    getAllUsersWithPermissions,\n    setUsers,\n    fetchUsersFromBackend,\n    checkCurrentUserPermissions,\n    permissionUpdateTrigger,\n    MODULES\n  };\n  return /*#__PURE__*/_jsxDEV(RoleContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 348,\n    columnNumber: 5\n  }, this);\n};\n_s2(RoleProvider, \"2YchXQl8LaUlvrUwCjdQZFP+iMk=\");\n_c = RoleProvider;\nexport default RoleContext;\nvar _c;\n$RefreshReg$(_c, \"RoleProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","useCallback","useRef","api","toast","jsxDEV","_jsxDEV","RoleContext","useRole","_s","context","Error","MODULES","DASHBOARD","DATA_CENTER","PROJECTS","DIGITAL_MEDIA","TEAM_COMMUNICATION","MARKETING","HR_MANAGEMENT","FINANCE_MANAGEMENT","SEO_MANAGEMENT","INTERNAL_POLICIES","SETTINGS_CONFIG","RoleProvider","children","_s2","userPermissions","setUserPermissions","users","setUsers","currentUser","setCurrentUser","permissionUpdateTrigger","setPermissionUpdateTrigger","isCheckingPermissions","setIsCheckingPermissions","permissionCheckInterval","lastPermissionHash","fetchUsersFromBackend","token","localStorage","getItem","response","get","console","log","data","transformedUsers","map","user","roleDefaultPermissions","role","mergedPermissions","permissions","Object","keys","forEach","key","undefined","id","_id","name","username","email","status","access","error","generatePermissionHash","_users$find","find","u","JSON","stringify","checkCurrentUserPermissions","updatedUser","setItem","usersResponse","newHash","oldHash","current","success","description","duration","prev","loadUserData","userData","parse","backendUsers","length","storedUsers","setInterval","clearInterval","hasPermission","module","_users$find2","userSpecificPermissions","hasOwnProperty","updateUserPermissions","userId","put","updatedUsers","_error$response","_error$response$data","message","getUserPermissions","updateUserRole","newRole","newStatus","isDemoData","test","updateData","apiError","_apiError$response","_error$response2","_error$response2$data","getAllUsersWithPermissions","value","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/exe/noxtmstudio/Frontend/src/contexts/RoleContext.js"],"sourcesContent":["import React, { createContext, useContext, useState, useEffect, useCallback, useRef } from 'react';\nimport api from '../config/api';\nimport { toast } from 'sonner';\n\nconst RoleContext = createContext();\n\nexport const useRole = () => {\n  const context = useContext(RoleContext);\n  if (!context) {\n    throw new Error('useRole must be used within a RoleProvider');\n  }\n  return context;\n};\n\n// Define available modules/sections\nexport const MODULES = {\n  DASHBOARD: 'dashboard',\n  DATA_CENTER: 'dataCenter',\n  PROJECTS: 'projects',\n  DIGITAL_MEDIA: 'digitalMediaManagement',\n  TEAM_COMMUNICATION: 'teamCommunication',\n  MARKETING: 'marketing',\n  HR_MANAGEMENT: 'hrManagement',\n  FINANCE_MANAGEMENT: 'financeManagement',\n  SEO_MANAGEMENT: 'seoManagement',\n  INTERNAL_POLICIES: 'internalPolicies',\n  SETTINGS_CONFIG: 'settingsConfiguration'\n};\n\n// Simplified: No default role permissions - all permissions are manual\n\nexport const RoleProvider = ({ children }) => {\n  const [userPermissions, setUserPermissions] = useState({});\n  const [users, setUsers] = useState([]);\n  const [currentUser, setCurrentUser] = useState(null);\n  const [permissionUpdateTrigger, setPermissionUpdateTrigger] = useState(0);\n  const [isCheckingPermissions, setIsCheckingPermissions] = useState(false);\n  const permissionCheckInterval = useRef(null);\n  const lastPermissionHash = useRef(null);\n\n  // Fetch users from backend\n  const fetchUsersFromBackend = async () => {\n    try {\n      const token = localStorage.getItem('token');\n      if (!token) return null;\n      \n      const response = await api.get('/users');\n      \n      console.log('Fetched users from backend:', response.data.users);\n      \n      // Transform backend data to match frontend format\n      const transformedUsers = response.data.users.map(user => {\n        // Get default permissions for the user's role\n        const roleDefaultPermissions = [user.role] || {};\n        \n        // Merge backend permissions with role defaults\n        // Backend permissions override role defaults\n        const mergedPermissions = { ...roleDefaultPermissions };\n        \n        // Apply user-specific permissions from backend\n        if (user.permissions) {\n          Object.keys(user.permissions).forEach(key => {\n            // Only override if the permission is explicitly set in backend\n            if (user.permissions[key] !== undefined && user.permissions[key] !== null) {\n              mergedPermissions[key] = user.permissions[key];\n            }\n          });\n        }\n        \n        return {\n          id: user._id,\n          name: user.username,\n          email: user.email,\n          role: user.role,\n          status: user.role === 'User' ? 'In Review' : (user.status || 'Active'),\n          access: user.access || [],\n          permissions: mergedPermissions\n        };\n      });\n      \n      console.log('Transformed users:', transformedUsers);\n      \n      return transformedUsers;\n    } catch (error) {\n      console.error('Error fetching users from backend:', error);\n      return null;\n    }\n  };\n\n  // Generate hash of current user permissions for change detection\n  const generatePermissionHash = useCallback((user) => {\n    if (!user) return null;\n    const userPermissions = users.find(u => u.id === user.id)?.permissions || {};\n    return JSON.stringify({ role: user.role, permissions: userPermissions });\n  }, [users]);\n\n  // Check current user permissions from backend\n  const checkCurrentUserPermissions = useCallback(async () => {\n    if (!currentUser || isCheckingPermissions) return;\n    \n    setIsCheckingPermissions(true);\n    try {\n      const response = await api.get('/profile');\n      const updatedUser = response.data;\n      \n      // Update current user data\n      setCurrentUser(updatedUser);\n      localStorage.setItem('user', JSON.stringify(updatedUser));\n      \n      // Fetch updated users list to get latest permissions\n      const usersResponse = await api.get('/users');\n      if (usersResponse.data && usersResponse.data.users) {\n        const transformedUsers = usersResponse.data.users.map(user => ({\n          id: user._id,\n          name: user.username,\n          email: user.email,\n          role: user.role,\n          status: user.role === 'User' ? 'In Review' : (user.status || 'Active'),\n          access: user.access || [],\n          permissions: user.permissions || {}\n        }));\n        \n        // Check if current user's permissions changed\n        const newHash = generatePermissionHash(updatedUser);\n        const oldHash = lastPermissionHash.current;\n        \n        if (oldHash && newHash && oldHash !== newHash) {\n          // Permissions changed - notify user and trigger re-render\n          toast.success('Your permissions have been updated!', {\n            description: 'Your access levels have been modified by an administrator.',\n            duration: 5000,\n          });\n          setPermissionUpdateTrigger(prev => prev + 1);\n        }\n        \n        lastPermissionHash.current = newHash;\n        setUsers(transformedUsers);\n        localStorage.setItem('usersData', JSON.stringify(transformedUsers));\n      }\n    } catch (error) {\n      console.error('Error checking user permissions:', error);\n      // Don't show error toast for permission checks to avoid spam\n    } finally {\n      setIsCheckingPermissions(false);\n    }\n  }, [currentUser, isCheckingPermissions, generatePermissionHash]);\n\n  // Load user data from localStorage or API\n  useEffect(() => {\n    const loadUserData = async () => {\n      const userData = JSON.parse(localStorage.getItem('user') || '{}');\n      setCurrentUser(userData);\n      \n      // Get user's role permissions\n      if (userData.role) {\n        const permissions = [userData.role] || {};\n        setUserPermissions(permissions);\n      }\n      \n      // Try to fetch from backend first\n      const backendUsers = await fetchUsersFromBackend();\n      \n      if (backendUsers && backendUsers.length > 0) {\n        setUsers(backendUsers);\n        localStorage.setItem('usersData', JSON.stringify(backendUsers));\n        \n        // Set initial permission hash\n        if (userData.id) {\n          lastPermissionHash.current = generatePermissionHash(userData);\n        }\n      } else {\n        // Fall back to local data\n        const storedUsers = JSON.parse(localStorage.getItem('usersData') || '[]');\n        setUsers(storedUsers);\n      }\n    };\n    \n    loadUserData();\n  }, [generatePermissionHash]);\n\n  // Set up real-time permission checking\n  useEffect(() => {\n    if (!currentUser) return;\n\n    // Start permission checking interval (every 30 seconds)\n    permissionCheckInterval.current = setInterval(() => {\n      checkCurrentUserPermissions();\n    }, 30000);\n\n    // Cleanup interval on unmount or user change\n    return () => {\n      if (permissionCheckInterval.current) {\n        clearInterval(permissionCheckInterval.current);\n      }\n    };\n  }, [currentUser, checkCurrentUserPermissions]);\n\n  // Check if user has permission for a module\n  const hasPermission = useCallback((module) => {\n    if (!currentUser || !currentUser.role) return false;\n    \n    // Admin has access to everything\n    if (currentUser.role === 'Admin') return true;\n    \n    // Check specific user permissions (overrides)\n    const userSpecificPermissions = users.find(u => u.id === currentUser.id)?.permissions;\n    if (userSpecificPermissions && userSpecificPermissions.hasOwnProperty(module)) {\n      return userSpecificPermissions[module];\n    }\n    \n    // Check default role permissions\n    return userPermissions[module] || false;\n  }, [currentUser, users, userPermissions]); // Remove permissionUpdateTrigger as it's not directly used\n\n\n  // Update user permissions (admin function)\n  const updateUserPermissions = async (userId, permissions) => {\n    try {\n      const token = localStorage.getItem('token');\n      \n      if (token) {\n        // Update on backend - send permissions directly\n        await api.put(`/users/${userId}/permissions`, permissions);\n      }\n      \n      // Update local state\n      const updatedUsers = users.map(user => {\n        if ((user._id || user.id) === userId) {\n          return { ...user, permissions: { ...user.permissions, ...permissions } };\n        }\n        return user;\n      });\n      \n      setUsers(updatedUsers);\n      localStorage.setItem('usersData', JSON.stringify(updatedUsers));\n      \n      return { success: true };\n    } catch (error) {\n      console.error('Error updating user permissions:', error);\n      return { \n        success: false, \n        error: error.response?.data?.message || error.message \n      };\n    }\n  };\n\n\n  // Get user permissions\n  const getUserPermissions = (userId) => {\n    const user = users.find(u => (u._id || u.id) === userId);\n    return user ? user.permissions : {};\n  };\n\n  // Update user role (admin function)\n  const updateUserRole = async (userId, newRole, newStatus = null) => {\n    try {\n      const token = localStorage.getItem('token');\n      \n      // Check if we're using demo data (string IDs) vs real backend data (ObjectIds)\n      const isDemoData = typeof userId === 'string' && /^[0-9]+$/.test(userId);\n      \n      if (token && !isDemoData) {\n        // Try to update on backend first (only for real backend data)\n        try {\n          const updateData = { role: newRole };\n          if (newStatus) {\n            updateData.status = newStatus;\n          }\n          await api.put(`/users/${userId}`, updateData);\n        } catch (apiError) {\n          // If the endpoint doesn't exist (404), log and continue with local update\n          if (apiError.response?.status === 404) {\n            console.log('User update endpoint not found, updating locally only');\n            // The local state will still be updated below\n          } else {\n            throw apiError; // Re-throw if it's a different error\n          }\n        }\n      }\n      \n      // Update local state\n      const updatedUsers = users.map(user => {\n        if (user.id === userId) {\n          const updatedUser = { ...user, role: newRole };\n          if (newStatus) {\n            updatedUser.status = newStatus;\n          }\n          return updatedUser;\n        }\n        return user;\n      });\n      \n      setUsers(updatedUsers);\n      localStorage.setItem('usersData', JSON.stringify(updatedUsers));\n      \n      return { success: true };\n    } catch (error) {\n      console.error('Error updating user role:', error);\n      \n      // Still update locally as fallback\n      const updatedUsers = users.map(user => {\n        if (user.id === userId) {\n          const updatedUser = { ...user, role: newRole };\n          if (newStatus) {\n            updatedUser.status = newStatus;\n          }\n          return updatedUser;\n        }\n        return user;\n      });\n      \n      setUsers(updatedUsers);\n      localStorage.setItem('usersData', JSON.stringify(updatedUsers));\n      \n      return { \n        success: false, \n        error: error.response?.data?.message || error.message \n      };\n    }\n  };\n\n\n  // Get all users with their permissions\n  const getAllUsersWithPermissions = () => {\n    return users.map(user => ({\n      ...user,\n      permissions: user.permissions || {}\n    }));\n  };\n\n  const value = {\n    currentUser,\n    userPermissions,\n    users,\n    hasPermission,\n    updateUserRole,\n    updateUserPermissions,\n    getUserPermissions,\n    getAllUsersWithPermissions,\n    setUsers,\n    fetchUsersFromBackend,\n    checkCurrentUserPermissions,\n    permissionUpdateTrigger,\n    MODULES\n  };\n\n  return (\n    <RoleContext.Provider value={value}>\n      {children}\n    </RoleContext.Provider>\n  );\n};\n\nexport default RoleContext;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}