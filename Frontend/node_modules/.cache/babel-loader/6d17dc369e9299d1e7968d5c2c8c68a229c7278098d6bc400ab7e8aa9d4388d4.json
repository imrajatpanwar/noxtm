{"ast":null,"code":"import _objectSpread from\"C:/exe/noxtm/Frontend/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";import React,{createContext,useContext,useState,useEffect,useCallback,useRef}from'react';import api from'../config/api';import{toast}from'sonner';import{jsx as _jsx}from\"react/jsx-runtime\";const RoleContext=/*#__PURE__*/createContext();export const useRole=()=>{const context=useContext(RoleContext);if(!context){throw new Error('useRole must be used within a RoleProvider');}return context;};// Define available modules/sections\nexport const MODULES={DASHBOARD:'dashboard',DATA_CENTER:'dataCenter',PROJECTS:'projects',DIGITAL_MEDIA:'digitalMediaManagement',TEAM_COMMUNICATION:'teamCommunication',MARKETING:'marketing',HR_MANAGEMENT:'hrManagement',FINANCE_MANAGEMENT:'financeManagement',SEO_MANAGEMENT:'seoManagement',INTERNAL_POLICIES:'internalPolicies',SETTINGS_CONFIG:'settingsConfiguration'};// Simplified: No default role permissions - all permissions are manual\nexport const RoleProvider=_ref=>{let{children}=_ref;const[userPermissions,setUserPermissions]=useState({});const[users,setUsers]=useState([]);const[currentUser,setCurrentUser]=useState(null);const[permissionUpdateTrigger,setPermissionUpdateTrigger]=useState(0);const[isCheckingPermissions,setIsCheckingPermissions]=useState(false);const permissionCheckInterval=useRef(null);const lastPermissionHash=useRef(null);// Fetch users from backend\nconst fetchUsersFromBackend=async()=>{try{const token=localStorage.getItem('token');if(!token)return null;const response=await api.get('/users');console.log('Fetched users from backend:',response.data.users);// Transform backend data to match frontend format\nconst transformedUsers=response.data.users.map(user=>{// Get default permissions for the user's role\nconst roleDefaultPermissions=[user.role]||{};// Merge backend permissions with role defaults\n// Backend permissions override role defaults\nconst mergedPermissions=_objectSpread({},roleDefaultPermissions);// Apply user-specific permissions from backend\nif(user.permissions){Object.keys(user.permissions).forEach(key=>{// Only override if the permission is explicitly set in backend\nif(user.permissions[key]!==undefined&&user.permissions[key]!==null){mergedPermissions[key]=user.permissions[key];}});}return{id:user._id,name:user.username,email:user.email,role:user.role,status:user.role==='User'?'In Review':user.status||'Active',access:user.access||[],permissions:mergedPermissions};});console.log('Transformed users:',transformedUsers);return transformedUsers;}catch(error){console.error('Error fetching users from backend:',error);return null;}};// Generate hash of current user permissions for change detection\nconst generatePermissionHash=useCallback(user=>{var _users$find;if(!user)return null;const userPermissions=((_users$find=users.find(u=>u.id===user.id))===null||_users$find===void 0?void 0:_users$find.permissions)||{};return JSON.stringify({role:user.role,permissions:userPermissions});},[users]);// Check current user permissions from backend\nconst checkCurrentUserPermissions=useCallback(async()=>{if(!currentUser||isCheckingPermissions)return;setIsCheckingPermissions(true);try{const response=await api.get('/profile');const updatedUser=response.data;// Update current user data\nsetCurrentUser(updatedUser);localStorage.setItem('user',JSON.stringify(updatedUser));// Fetch updated users list to get latest permissions\nconst usersResponse=await api.get('/users');if(usersResponse.data&&usersResponse.data.users){const transformedUsers=usersResponse.data.users.map(user=>({id:user._id,name:user.username,email:user.email,role:user.role,status:user.role==='User'?'In Review':user.status||'Active',access:user.access||[],permissions:user.permissions||{}}));// Check if current user's permissions changed\nconst newHash=generatePermissionHash(updatedUser);const oldHash=lastPermissionHash.current;if(oldHash&&newHash&&oldHash!==newHash){// Permissions changed - notify user and trigger re-render\ntoast.success('Your permissions have been updated!',{description:'Your access levels have been modified by an administrator.',duration:5000});setPermissionUpdateTrigger(prev=>prev+1);}lastPermissionHash.current=newHash;setUsers(transformedUsers);localStorage.setItem('usersData',JSON.stringify(transformedUsers));}}catch(error){console.error('Error checking user permissions:',error);// Don't show error toast for permission checks to avoid spam\n}finally{setIsCheckingPermissions(false);}},[currentUser,isCheckingPermissions,generatePermissionHash]);// Load user data from localStorage or API\nuseEffect(()=>{const loadUserData=async()=>{const userData=JSON.parse(localStorage.getItem('user')||'{}');setCurrentUser(userData);// Get user's role permissions\nif(userData.role){const permissions=[userData.role]||{};setUserPermissions(permissions);}// Try to fetch from backend first\nconst backendUsers=await fetchUsersFromBackend();if(backendUsers&&backendUsers.length>0){setUsers(backendUsers);localStorage.setItem('usersData',JSON.stringify(backendUsers));// Set initial permission hash\nif(userData.id){lastPermissionHash.current=generatePermissionHash(userData);}}else{// Fall back to local data\nconst storedUsers=JSON.parse(localStorage.getItem('usersData')||'[]');setUsers(storedUsers);}};loadUserData();},[generatePermissionHash]);// Set up real-time permission checking\nuseEffect(()=>{if(!currentUser)return;// Start permission checking interval (every 30 seconds)\npermissionCheckInterval.current=setInterval(()=>{checkCurrentUserPermissions();},30000);// Cleanup interval on unmount or user change\nreturn()=>{if(permissionCheckInterval.current){clearInterval(permissionCheckInterval.current);}};},[currentUser,checkCurrentUserPermissions]);// Check if user has permission for a module\nconst hasPermission=useCallback(module=>{var _users$find2;if(!currentUser||!currentUser.role)return false;// Admin has access to everything\nif(currentUser.role==='Admin')return true;// Check specific user permissions (overrides)\nconst userSpecificPermissions=(_users$find2=users.find(u=>u.id===currentUser.id))===null||_users$find2===void 0?void 0:_users$find2.permissions;if(userSpecificPermissions&&userSpecificPermissions.hasOwnProperty(module)){return userSpecificPermissions[module];}// Check default role permissions\nreturn userPermissions[module]||false;},[currentUser,users,userPermissions]);// Remove permissionUpdateTrigger as it's not directly used\n// Update user permissions (admin function)\nconst updateUserPermissions=async(userId,permissions)=>{try{const token=localStorage.getItem('token');if(token){// Update on backend - send permissions directly\nawait api.put(\"/users/\".concat(userId,\"/permissions\"),permissions);}// Update local state\nconst updatedUsers=users.map(user=>{if((user._id||user.id)===userId){return _objectSpread(_objectSpread({},user),{},{permissions:_objectSpread(_objectSpread({},user.permissions),permissions)});}return user;});setUsers(updatedUsers);localStorage.setItem('usersData',JSON.stringify(updatedUsers));return{success:true};}catch(error){var _error$response,_error$response$data;console.error('Error updating user permissions:',error);return{success:false,error:((_error$response=error.response)===null||_error$response===void 0?void 0:(_error$response$data=_error$response.data)===null||_error$response$data===void 0?void 0:_error$response$data.message)||error.message};}};// Get user permissions\nconst getUserPermissions=userId=>{const user=users.find(u=>(u._id||u.id)===userId);return user?user.permissions:{};};// Update user role (admin function)\nconst updateUserRole=async function(userId,newRole){let newStatus=arguments.length>2&&arguments[2]!==undefined?arguments[2]:null;try{const token=localStorage.getItem('token');// Check if we're using demo data (string IDs) vs real backend data (ObjectIds)\nconst isDemoData=typeof userId==='string'&&/^[0-9]+$/.test(userId);if(token&&!isDemoData){// Try to update on backend first (only for real backend data)\ntry{const updateData={role:newRole};if(newStatus){updateData.status=newStatus;}await api.put(\"/users/\".concat(userId),updateData);}catch(apiError){var _apiError$response;// If the endpoint doesn't exist (404), log and continue with local update\nif(((_apiError$response=apiError.response)===null||_apiError$response===void 0?void 0:_apiError$response.status)===404){console.log('User update endpoint not found, updating locally only');// The local state will still be updated below\n}else{throw apiError;// Re-throw if it's a different error\n}}}// Update local state\nconst updatedUsers=users.map(user=>{if(user.id===userId){const updatedUser=_objectSpread(_objectSpread({},user),{},{role:newRole});if(newStatus){updatedUser.status=newStatus;}return updatedUser;}return user;});setUsers(updatedUsers);localStorage.setItem('usersData',JSON.stringify(updatedUsers));return{success:true};}catch(error){var _error$response2,_error$response2$data;console.error('Error updating user role:',error);// Still update locally as fallback\nconst updatedUsers=users.map(user=>{if(user.id===userId){const updatedUser=_objectSpread(_objectSpread({},user),{},{role:newRole});if(newStatus){updatedUser.status=newStatus;}return updatedUser;}return user;});setUsers(updatedUsers);localStorage.setItem('usersData',JSON.stringify(updatedUsers));return{success:false,error:((_error$response2=error.response)===null||_error$response2===void 0?void 0:(_error$response2$data=_error$response2.data)===null||_error$response2$data===void 0?void 0:_error$response2$data.message)||error.message};}};// Get all users with their permissions\nconst getAllUsersWithPermissions=()=>{return users.map(user=>_objectSpread(_objectSpread({},user),{},{permissions:user.permissions||{}}));};const value={currentUser,userPermissions,users,hasPermission,updateUserRole,updateUserPermissions,getUserPermissions,getAllUsersWithPermissions,setUsers,fetchUsersFromBackend,checkCurrentUserPermissions,permissionUpdateTrigger,MODULES};return/*#__PURE__*/_jsx(RoleContext.Provider,{value:value,children:children});};export default RoleContext;","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","useCallback","useRef","api","toast","jsx","_jsx","RoleContext","useRole","context","Error","MODULES","DASHBOARD","DATA_CENTER","PROJECTS","DIGITAL_MEDIA","TEAM_COMMUNICATION","MARKETING","HR_MANAGEMENT","FINANCE_MANAGEMENT","SEO_MANAGEMENT","INTERNAL_POLICIES","SETTINGS_CONFIG","RoleProvider","_ref","children","userPermissions","setUserPermissions","users","setUsers","currentUser","setCurrentUser","permissionUpdateTrigger","setPermissionUpdateTrigger","isCheckingPermissions","setIsCheckingPermissions","permissionCheckInterval","lastPermissionHash","fetchUsersFromBackend","token","localStorage","getItem","response","get","console","log","data","transformedUsers","map","user","roleDefaultPermissions","role","mergedPermissions","_objectSpread","permissions","Object","keys","forEach","key","undefined","id","_id","name","username","email","status","access","error","generatePermissionHash","_users$find","find","u","JSON","stringify","checkCurrentUserPermissions","updatedUser","setItem","usersResponse","newHash","oldHash","current","success","description","duration","prev","loadUserData","userData","parse","backendUsers","length","storedUsers","setInterval","clearInterval","hasPermission","module","_users$find2","userSpecificPermissions","hasOwnProperty","updateUserPermissions","userId","put","concat","updatedUsers","_error$response","_error$response$data","message","getUserPermissions","updateUserRole","newRole","newStatus","arguments","isDemoData","test","updateData","apiError","_apiError$response","_error$response2","_error$response2$data","getAllUsersWithPermissions","value","Provider"],"sources":["C:/exe/noxtm/Frontend/src/contexts/RoleContext.js"],"sourcesContent":["import React, { createContext, useContext, useState, useEffect, useCallback, useRef } from 'react';\nimport api from '../config/api';\nimport { toast } from 'sonner';\n\nconst RoleContext = createContext();\n\nexport const useRole = () => {\n  const context = useContext(RoleContext);\n  if (!context) {\n    throw new Error('useRole must be used within a RoleProvider');\n  }\n  return context;\n};\n\n// Define available modules/sections\nexport const MODULES = {\n  DASHBOARD: 'dashboard',\n  DATA_CENTER: 'dataCenter',\n  PROJECTS: 'projects',\n  DIGITAL_MEDIA: 'digitalMediaManagement',\n  TEAM_COMMUNICATION: 'teamCommunication',\n  MARKETING: 'marketing',\n  HR_MANAGEMENT: 'hrManagement',\n  FINANCE_MANAGEMENT: 'financeManagement',\n  SEO_MANAGEMENT: 'seoManagement',\n  INTERNAL_POLICIES: 'internalPolicies',\n  SETTINGS_CONFIG: 'settingsConfiguration'\n};\n\n// Simplified: No default role permissions - all permissions are manual\n\nexport const RoleProvider = ({ children }) => {\n  const [userPermissions, setUserPermissions] = useState({});\n  const [users, setUsers] = useState([]);\n  const [currentUser, setCurrentUser] = useState(null);\n  const [permissionUpdateTrigger, setPermissionUpdateTrigger] = useState(0);\n  const [isCheckingPermissions, setIsCheckingPermissions] = useState(false);\n  const permissionCheckInterval = useRef(null);\n  const lastPermissionHash = useRef(null);\n\n  // Fetch users from backend\n  const fetchUsersFromBackend = async () => {\n    try {\n      const token = localStorage.getItem('token');\n      if (!token) return null;\n      \n      const response = await api.get('/users');\n      \n      console.log('Fetched users from backend:', response.data.users);\n      \n      // Transform backend data to match frontend format\n      const transformedUsers = response.data.users.map(user => {\n        // Get default permissions for the user's role\n        const roleDefaultPermissions = [user.role] || {};\n        \n        // Merge backend permissions with role defaults\n        // Backend permissions override role defaults\n        const mergedPermissions = { ...roleDefaultPermissions };\n        \n        // Apply user-specific permissions from backend\n        if (user.permissions) {\n          Object.keys(user.permissions).forEach(key => {\n            // Only override if the permission is explicitly set in backend\n            if (user.permissions[key] !== undefined && user.permissions[key] !== null) {\n              mergedPermissions[key] = user.permissions[key];\n            }\n          });\n        }\n        \n        return {\n          id: user._id,\n          name: user.username,\n          email: user.email,\n          role: user.role,\n          status: user.role === 'User' ? 'In Review' : (user.status || 'Active'),\n          access: user.access || [],\n          permissions: mergedPermissions\n        };\n      });\n      \n      console.log('Transformed users:', transformedUsers);\n      \n      return transformedUsers;\n    } catch (error) {\n      console.error('Error fetching users from backend:', error);\n      return null;\n    }\n  };\n\n  // Generate hash of current user permissions for change detection\n  const generatePermissionHash = useCallback((user) => {\n    if (!user) return null;\n    const userPermissions = users.find(u => u.id === user.id)?.permissions || {};\n    return JSON.stringify({ role: user.role, permissions: userPermissions });\n  }, [users]);\n\n  // Check current user permissions from backend\n  const checkCurrentUserPermissions = useCallback(async () => {\n    if (!currentUser || isCheckingPermissions) return;\n    \n    setIsCheckingPermissions(true);\n    try {\n      const response = await api.get('/profile');\n      const updatedUser = response.data;\n      \n      // Update current user data\n      setCurrentUser(updatedUser);\n      localStorage.setItem('user', JSON.stringify(updatedUser));\n      \n      // Fetch updated users list to get latest permissions\n      const usersResponse = await api.get('/users');\n      if (usersResponse.data && usersResponse.data.users) {\n        const transformedUsers = usersResponse.data.users.map(user => ({\n          id: user._id,\n          name: user.username,\n          email: user.email,\n          role: user.role,\n          status: user.role === 'User' ? 'In Review' : (user.status || 'Active'),\n          access: user.access || [],\n          permissions: user.permissions || {}\n        }));\n        \n        // Check if current user's permissions changed\n        const newHash = generatePermissionHash(updatedUser);\n        const oldHash = lastPermissionHash.current;\n        \n        if (oldHash && newHash && oldHash !== newHash) {\n          // Permissions changed - notify user and trigger re-render\n          toast.success('Your permissions have been updated!', {\n            description: 'Your access levels have been modified by an administrator.',\n            duration: 5000,\n          });\n          setPermissionUpdateTrigger(prev => prev + 1);\n        }\n        \n        lastPermissionHash.current = newHash;\n        setUsers(transformedUsers);\n        localStorage.setItem('usersData', JSON.stringify(transformedUsers));\n      }\n    } catch (error) {\n      console.error('Error checking user permissions:', error);\n      // Don't show error toast for permission checks to avoid spam\n    } finally {\n      setIsCheckingPermissions(false);\n    }\n  }, [currentUser, isCheckingPermissions, generatePermissionHash]);\n\n  // Load user data from localStorage or API\n  useEffect(() => {\n    const loadUserData = async () => {\n      const userData = JSON.parse(localStorage.getItem('user') || '{}');\n      setCurrentUser(userData);\n      \n      // Get user's role permissions\n      if (userData.role) {\n        const permissions = [userData.role] || {};\n        setUserPermissions(permissions);\n      }\n      \n      // Try to fetch from backend first\n      const backendUsers = await fetchUsersFromBackend();\n      \n      if (backendUsers && backendUsers.length > 0) {\n        setUsers(backendUsers);\n        localStorage.setItem('usersData', JSON.stringify(backendUsers));\n        \n        // Set initial permission hash\n        if (userData.id) {\n          lastPermissionHash.current = generatePermissionHash(userData);\n        }\n      } else {\n        // Fall back to local data\n        const storedUsers = JSON.parse(localStorage.getItem('usersData') || '[]');\n        setUsers(storedUsers);\n      }\n    };\n    \n    loadUserData();\n  }, [generatePermissionHash]);\n\n  // Set up real-time permission checking\n  useEffect(() => {\n    if (!currentUser) return;\n\n    // Start permission checking interval (every 30 seconds)\n    permissionCheckInterval.current = setInterval(() => {\n      checkCurrentUserPermissions();\n    }, 30000);\n\n    // Cleanup interval on unmount or user change\n    return () => {\n      if (permissionCheckInterval.current) {\n        clearInterval(permissionCheckInterval.current);\n      }\n    };\n  }, [currentUser, checkCurrentUserPermissions]);\n\n  // Check if user has permission for a module\n  const hasPermission = useCallback((module) => {\n    if (!currentUser || !currentUser.role) return false;\n    \n    // Admin has access to everything\n    if (currentUser.role === 'Admin') return true;\n    \n    // Check specific user permissions (overrides)\n    const userSpecificPermissions = users.find(u => u.id === currentUser.id)?.permissions;\n    if (userSpecificPermissions && userSpecificPermissions.hasOwnProperty(module)) {\n      return userSpecificPermissions[module];\n    }\n    \n    // Check default role permissions\n    return userPermissions[module] || false;\n  }, [currentUser, users, userPermissions]); // Remove permissionUpdateTrigger as it's not directly used\n\n\n  // Update user permissions (admin function)\n  const updateUserPermissions = async (userId, permissions) => {\n    try {\n      const token = localStorage.getItem('token');\n      \n      if (token) {\n        // Update on backend - send permissions directly\n        await api.put(`/users/${userId}/permissions`, permissions);\n      }\n      \n      // Update local state\n      const updatedUsers = users.map(user => {\n        if ((user._id || user.id) === userId) {\n          return { ...user, permissions: { ...user.permissions, ...permissions } };\n        }\n        return user;\n      });\n      \n      setUsers(updatedUsers);\n      localStorage.setItem('usersData', JSON.stringify(updatedUsers));\n      \n      return { success: true };\n    } catch (error) {\n      console.error('Error updating user permissions:', error);\n      return { \n        success: false, \n        error: error.response?.data?.message || error.message \n      };\n    }\n  };\n\n\n  // Get user permissions\n  const getUserPermissions = (userId) => {\n    const user = users.find(u => (u._id || u.id) === userId);\n    return user ? user.permissions : {};\n  };\n\n  // Update user role (admin function)\n  const updateUserRole = async (userId, newRole, newStatus = null) => {\n    try {\n      const token = localStorage.getItem('token');\n      \n      // Check if we're using demo data (string IDs) vs real backend data (ObjectIds)\n      const isDemoData = typeof userId === 'string' && /^[0-9]+$/.test(userId);\n      \n      if (token && !isDemoData) {\n        // Try to update on backend first (only for real backend data)\n        try {\n          const updateData = { role: newRole };\n          if (newStatus) {\n            updateData.status = newStatus;\n          }\n          await api.put(`/users/${userId}`, updateData);\n        } catch (apiError) {\n          // If the endpoint doesn't exist (404), log and continue with local update\n          if (apiError.response?.status === 404) {\n            console.log('User update endpoint not found, updating locally only');\n            // The local state will still be updated below\n          } else {\n            throw apiError; // Re-throw if it's a different error\n          }\n        }\n      }\n      \n      // Update local state\n      const updatedUsers = users.map(user => {\n        if (user.id === userId) {\n          const updatedUser = { ...user, role: newRole };\n          if (newStatus) {\n            updatedUser.status = newStatus;\n          }\n          return updatedUser;\n        }\n        return user;\n      });\n      \n      setUsers(updatedUsers);\n      localStorage.setItem('usersData', JSON.stringify(updatedUsers));\n      \n      return { success: true };\n    } catch (error) {\n      console.error('Error updating user role:', error);\n      \n      // Still update locally as fallback\n      const updatedUsers = users.map(user => {\n        if (user.id === userId) {\n          const updatedUser = { ...user, role: newRole };\n          if (newStatus) {\n            updatedUser.status = newStatus;\n          }\n          return updatedUser;\n        }\n        return user;\n      });\n      \n      setUsers(updatedUsers);\n      localStorage.setItem('usersData', JSON.stringify(updatedUsers));\n      \n      return { \n        success: false, \n        error: error.response?.data?.message || error.message \n      };\n    }\n  };\n\n\n  // Get all users with their permissions\n  const getAllUsersWithPermissions = () => {\n    return users.map(user => ({\n      ...user,\n      permissions: user.permissions || {}\n    }));\n  };\n\n  const value = {\n    currentUser,\n    userPermissions,\n    users,\n    hasPermission,\n    updateUserRole,\n    updateUserPermissions,\n    getUserPermissions,\n    getAllUsersWithPermissions,\n    setUsers,\n    fetchUsersFromBackend,\n    checkCurrentUserPermissions,\n    permissionUpdateTrigger,\n    MODULES\n  };\n\n  return (\n    <RoleContext.Provider value={value}>\n      {children}\n    </RoleContext.Provider>\n  );\n};\n\nexport default RoleContext;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}