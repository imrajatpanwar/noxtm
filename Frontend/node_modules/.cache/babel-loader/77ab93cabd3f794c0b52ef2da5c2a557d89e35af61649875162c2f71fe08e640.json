{"ast":null,"code":"import _objectSpread from\"/Users/aaravpanwar/noxtmstudio/Frontend/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";import React,{createContext,useContext,useState,useEffect}from'react';import api from'../config/api';import{jsx as _jsx}from\"react/jsx-runtime\";const RoleContext=/*#__PURE__*/createContext();export const useRole=()=>{const context=useContext(RoleContext);if(!context){throw new Error('useRole must be used within a RoleProvider');}return context;};// Define available modules/sections\nexport const MODULES={DASHBOARD:'dashboard',DATA_CENTER:'dataCenter',PROJECTS:'projects',DIGITAL_MEDIA:'digitalMediaManagement',TEAM_COMMUNICATION:'teamCommunication',MARKETING:'marketing',HR_MANAGEMENT:'hrManagement',FINANCE_MANAGEMENT:'financeManagement',SEO_MANAGEMENT:'seoManagement',INTERNAL_POLICIES:'internalPolicies',SETTINGS_CONFIG:'settingsConfiguration'};// Simplified: No default role permissions - all permissions are manual\nexport const RoleProvider=_ref=>{let{children}=_ref;const[userPermissions,setUserPermissions]=useState({});const[users,setUsers]=useState([]);const[currentUser,setCurrentUser]=useState(null);// Fetch users from backend\nconst fetchUsersFromBackend=async()=>{try{const token=localStorage.getItem('token');if(!token)return null;const response=await api.get('/users');console.log('Fetched users from backend:',response.data.users);// Transform backend data to match frontend format\nconst transformedUsers=response.data.users.map(user=>{// Get default permissions for the user's role\nconst roleDefaultPermissions=[user.role]||{};// Merge backend permissions with role defaults\n// Backend permissions override role defaults\nconst mergedPermissions=_objectSpread({},roleDefaultPermissions);// Apply user-specific permissions from backend\nif(user.permissions){Object.keys(user.permissions).forEach(key=>{// Only override if the permission is explicitly set in backend\nif(user.permissions[key]!==undefined&&user.permissions[key]!==null){mergedPermissions[key]=user.permissions[key];}});}return{id:user._id,name:user.username,email:user.email,role:user.role,status:user.status||'Active',access:user.access||[],permissions:mergedPermissions};});console.log('Transformed users:',transformedUsers);return transformedUsers;}catch(error){console.error('Error fetching users from backend:',error);return null;}};// Load user data from localStorage or API\nuseEffect(()=>{const loadUserData=async()=>{const userData=JSON.parse(localStorage.getItem('user')||'{}');setCurrentUser(userData);// Get user's role permissions\nif(userData.role){const permissions=[userData.role]||{};setUserPermissions(permissions);}// Try to fetch from backend first\nconst backendUsers=await fetchUsersFromBackend();if(backendUsers&&backendUsers.length>0){setUsers(backendUsers);localStorage.setItem('usersData',JSON.stringify(backendUsers));}else{// Fall back to local data\nconst storedUsers=JSON.parse(localStorage.getItem('usersData')||'[]');setUsers(storedUsers);}};loadUserData();},[]);// Check if user has permission for a module\nconst hasPermission=module=>{var _users$find;if(!currentUser||!currentUser.role)return false;// Admin has access to everything\nif(currentUser.role==='Admin')return true;// Check specific user permissions (overrides)\nconst userSpecificPermissions=(_users$find=users.find(u=>u.id===currentUser.id))===null||_users$find===void 0?void 0:_users$find.permissions;if(userSpecificPermissions&&userSpecificPermissions.hasOwnProperty(module)){return userSpecificPermissions[module];}// Check default role permissions\nreturn userPermissions[module]||false;};// Update user permissions (admin function)\n// Get user permissions\n// Update user role (admin function)\nconst updateUserRole=async function(userId,newRole){let newStatus=arguments.length>2&&arguments[2]!==undefined?arguments[2]:null;try{const token=localStorage.getItem('token');// Check if we're using demo data (string IDs) vs real backend data (ObjectIds)\nconst isDemoData=typeof userId==='string'&&/^[0-9]+$/.test(userId);if(token&&!isDemoData){// Try to update on backend first (only for real backend data)\ntry{const updateData={role:newRole};if(newStatus){updateData.status=newStatus;}await api.put(\"/users/\".concat(userId),updateData);}catch(apiError){var _apiError$response;// If the endpoint doesn't exist (404), log and continue with local update\nif(((_apiError$response=apiError.response)===null||_apiError$response===void 0?void 0:_apiError$response.status)===404){console.log('User update endpoint not found, updating locally only');// The local state will still be updated below\n}else{throw apiError;// Re-throw if it's a different error\n}}}// Update local state\nconst updatedUsers=users.map(user=>{if(user.id===userId){const updatedUser=_objectSpread(_objectSpread({},user),{},{role:newRole});if(newStatus){updatedUser.status=newStatus;}return updatedUser;}return user;});setUsers(updatedUsers);localStorage.setItem('usersData',JSON.stringify(updatedUsers));return{success:true};}catch(error){var _error$response,_error$response$data;console.error('Error updating user role:',error);// Still update locally as fallback\nconst updatedUsers=users.map(user=>{if(user.id===userId){const updatedUser=_objectSpread(_objectSpread({},user),{},{role:newRole});if(newStatus){updatedUser.status=newStatus;}return updatedUser;}return user;});setUsers(updatedUsers);localStorage.setItem('usersData',JSON.stringify(updatedUsers));return{success:false,error:((_error$response=error.response)===null||_error$response===void 0?void 0:(_error$response$data=_error$response.data)===null||_error$response$data===void 0?void 0:_error$response$data.message)||error.message};}};// Get all users with their permissions\nconst value={currentUser,userPermissions,users,hasPermission,updateUserRole,setUsers,fetchUsersFromBackend};return/*#__PURE__*/_jsx(RoleContext.Provider,{value:value,children:children});};export default RoleContext;","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","api","jsx","_jsx","RoleContext","useRole","context","Error","MODULES","DASHBOARD","DATA_CENTER","PROJECTS","DIGITAL_MEDIA","TEAM_COMMUNICATION","MARKETING","HR_MANAGEMENT","FINANCE_MANAGEMENT","SEO_MANAGEMENT","INTERNAL_POLICIES","SETTINGS_CONFIG","RoleProvider","_ref","children","userPermissions","setUserPermissions","users","setUsers","currentUser","setCurrentUser","fetchUsersFromBackend","token","localStorage","getItem","response","get","console","log","data","transformedUsers","map","user","roleDefaultPermissions","role","mergedPermissions","_objectSpread","permissions","Object","keys","forEach","key","undefined","id","_id","name","username","email","status","access","error","loadUserData","userData","JSON","parse","backendUsers","length","setItem","stringify","storedUsers","hasPermission","module","_users$find","userSpecificPermissions","find","u","hasOwnProperty","updateUserRole","userId","newRole","newStatus","arguments","isDemoData","test","updateData","put","concat","apiError","_apiError$response","updatedUsers","updatedUser","success","_error$response","_error$response$data","message","value","Provider"],"sources":["/Users/aaravpanwar/noxtmstudio/Frontend/src/contexts/RoleContext.js"],"sourcesContent":["import React, { createContext, useContext, useState, useEffect } from 'react';\nimport api from '../config/api';\n\nconst RoleContext = createContext();\n\nexport const useRole = () => {\n  const context = useContext(RoleContext);\n  if (!context) {\n    throw new Error('useRole must be used within a RoleProvider');\n  }\n  return context;\n};\n\n// Define available modules/sections\nexport const MODULES = {\n  DASHBOARD: 'dashboard',\n  DATA_CENTER: 'dataCenter',\n  PROJECTS: 'projects',\n  DIGITAL_MEDIA: 'digitalMediaManagement',\n  TEAM_COMMUNICATION: 'teamCommunication',\n  MARKETING: 'marketing',\n  HR_MANAGEMENT: 'hrManagement',\n  FINANCE_MANAGEMENT: 'financeManagement',\n  SEO_MANAGEMENT: 'seoManagement',\n  INTERNAL_POLICIES: 'internalPolicies',\n  SETTINGS_CONFIG: 'settingsConfiguration'\n};\n\n// Simplified: No default role permissions - all permissions are manual\n\nexport const RoleProvider = ({ children }) => {\n  const [userPermissions, setUserPermissions] = useState({});\n  const [users, setUsers] = useState([]);\n  const [currentUser, setCurrentUser] = useState(null);\n\n  // Fetch users from backend\n  const fetchUsersFromBackend = async () => {\n    try {\n      const token = localStorage.getItem('token');\n      if (!token) return null;\n      \n      const response = await api.get('/users');\n      \n      console.log('Fetched users from backend:', response.data.users);\n      \n      // Transform backend data to match frontend format\n      const transformedUsers = response.data.users.map(user => {\n        // Get default permissions for the user's role\n        const roleDefaultPermissions = [user.role] || {};\n        \n        // Merge backend permissions with role defaults\n        // Backend permissions override role defaults\n        const mergedPermissions = { ...roleDefaultPermissions };\n        \n        // Apply user-specific permissions from backend\n        if (user.permissions) {\n          Object.keys(user.permissions).forEach(key => {\n            // Only override if the permission is explicitly set in backend\n            if (user.permissions[key] !== undefined && user.permissions[key] !== null) {\n              mergedPermissions[key] = user.permissions[key];\n            }\n          });\n        }\n        \n        return {\n          id: user._id,\n          name: user.username,\n          email: user.email,\n          role: user.role,\n          status: user.status || 'Active',\n          access: user.access || [],\n          permissions: mergedPermissions\n        };\n      });\n      \n      console.log('Transformed users:', transformedUsers);\n      \n      return transformedUsers;\n    } catch (error) {\n      console.error('Error fetching users from backend:', error);\n      return null;\n    }\n  };\n\n  // Load user data from localStorage or API\n  useEffect(() => {\n    const loadUserData = async () => {\n      const userData = JSON.parse(localStorage.getItem('user') || '{}');\n      setCurrentUser(userData);\n      \n      // Get user's role permissions\n      if (userData.role) {\n        const permissions = [userData.role] || {};\n        setUserPermissions(permissions);\n      }\n      \n      // Try to fetch from backend first\n      const backendUsers = await fetchUsersFromBackend();\n      \n      if (backendUsers && backendUsers.length > 0) {\n        setUsers(backendUsers);\n        localStorage.setItem('usersData', JSON.stringify(backendUsers));\n      } else {\n        // Fall back to local data\n        const storedUsers = JSON.parse(localStorage.getItem('usersData') || '[]');\n        setUsers(storedUsers);\n      }\n    };\n    \n    loadUserData();\n  }, []);\n\n  // Check if user has permission for a module\n  const hasPermission = (module) => {\n    if (!currentUser || !currentUser.role) return false;\n    \n    // Admin has access to everything\n    if (currentUser.role === 'Admin') return true;\n    \n    // Check specific user permissions (overrides)\n    const userSpecificPermissions = users.find(u => u.id === currentUser.id)?.permissions;\n    if (userSpecificPermissions && userSpecificPermissions.hasOwnProperty(module)) {\n      return userSpecificPermissions[module];\n    }\n    \n    // Check default role permissions\n    return userPermissions[module] || false;\n  };\n\n  // Update user permissions (admin function)\n\n  // Get user permissions\n\n  // Update user role (admin function)\n  const updateUserRole = async (userId, newRole, newStatus = null) => {\n    try {\n      const token = localStorage.getItem('token');\n      \n      // Check if we're using demo data (string IDs) vs real backend data (ObjectIds)\n      const isDemoData = typeof userId === 'string' && /^[0-9]+$/.test(userId);\n      \n      if (token && !isDemoData) {\n        // Try to update on backend first (only for real backend data)\n        try {\n          const updateData = { role: newRole };\n          if (newStatus) {\n            updateData.status = newStatus;\n          }\n          await api.put(`/users/${userId}`, updateData);\n        } catch (apiError) {\n          // If the endpoint doesn't exist (404), log and continue with local update\n          if (apiError.response?.status === 404) {\n            console.log('User update endpoint not found, updating locally only');\n            // The local state will still be updated below\n          } else {\n            throw apiError; // Re-throw if it's a different error\n          }\n        }\n      }\n      \n      // Update local state\n      const updatedUsers = users.map(user => {\n        if (user.id === userId) {\n          const updatedUser = { ...user, role: newRole };\n          if (newStatus) {\n            updatedUser.status = newStatus;\n          }\n          return updatedUser;\n        }\n        return user;\n      });\n      \n      setUsers(updatedUsers);\n      localStorage.setItem('usersData', JSON.stringify(updatedUsers));\n      \n      return { success: true };\n    } catch (error) {\n      console.error('Error updating user role:', error);\n      \n      // Still update locally as fallback\n      const updatedUsers = users.map(user => {\n        if (user.id === userId) {\n          const updatedUser = { ...user, role: newRole };\n          if (newStatus) {\n            updatedUser.status = newStatus;\n          }\n          return updatedUser;\n        }\n        return user;\n      });\n      \n      setUsers(updatedUsers);\n      localStorage.setItem('usersData', JSON.stringify(updatedUsers));\n      \n      return { \n        success: false, \n        error: error.response?.data?.message || error.message \n      };\n    }\n  };\n\n  // Get all users with their permissions\n\n  const value = {\n    currentUser,\n    userPermissions,\n    users,\n    hasPermission,\n    updateUserRole,\n    setUsers,\n    fetchUsersFromBackend,\n    \n    \n  };\n\n  return (\n    <RoleContext.Provider value={value}>\n      {children}\n    </RoleContext.Provider>\n  );\n};\n\nexport default RoleContext;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}