{"ast":null,"code":"var _jsxFileName = \"/Users/aaravpanwar/noxtmstudio/Frontend/src/contexts/RoleContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useState, useEffect } from 'react';\nimport api from '../config/api';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst RoleContext = /*#__PURE__*/createContext();\nexport const useRole = () => {\n  _s();\n  const context = useContext(RoleContext);\n  if (!context) {\n    throw new Error('useRole must be used within a RoleProvider');\n  }\n  return context;\n};\n\n// Define available modules/sections\n_s(useRole, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nexport const MODULES = {\n  DASHBOARD: 'dashboard',\n  DATA_CENTER: 'dataCenter',\n  PROJECTS: 'projects',\n  DIGITAL_MEDIA: 'digitalMediaManagement',\n  TEAM_COMMUNICATION: 'teamCommunication',\n  MARKETING: 'marketing',\n  HR_MANAGEMENT: 'hrManagement',\n  FINANCE_MANAGEMENT: 'financeManagement',\n  SEO_MANAGEMENT: 'seoManagement',\n  INTERNAL_POLICIES: 'internalPolicies',\n  SETTINGS_CONFIG: 'settingsConfiguration'\n};\n\n// Simplified: No default role permissions - all permissions are manual\n\nexport const RoleProvider = ({\n  children\n}) => {\n  _s2();\n  const [userPermissions, setUserPermissions] = useState({});\n  const [users, setUsers] = useState([]);\n  const [currentUser, setCurrentUser] = useState(null);\n\n  // Fetch users from backend\n  const fetchUsersFromBackend = async () => {\n    try {\n      const token = localStorage.getItem('token');\n      if (!token) return null;\n      const response = await api.get('/users');\n      console.log('Fetched users from backend:', response.data.users);\n\n      // Transform backend data to match frontend format\n      const transformedUsers = response.data.users.map(user => {\n        // Get default permissions for the user's role\n        const roleDefaultPermissions = [user.role] || {};\n\n        // Merge backend permissions with role defaults\n        // Backend permissions override role defaults\n        const mergedPermissions = {\n          ...roleDefaultPermissions\n        };\n\n        // Apply user-specific permissions from backend\n        if (user.permissions) {\n          Object.keys(user.permissions).forEach(key => {\n            // Only override if the permission is explicitly set in backend\n            if (user.permissions[key] !== undefined && user.permissions[key] !== null) {\n              mergedPermissions[key] = user.permissions[key];\n            }\n          });\n        }\n        return {\n          id: user._id,\n          name: user.username,\n          email: user.email,\n          role: user.role,\n          status: user.status || 'Active',\n          access: user.access || [],\n          permissions: mergedPermissions\n        };\n      });\n      console.log('Transformed users:', transformedUsers);\n      return transformedUsers;\n    } catch (error) {\n      console.error('Error fetching users from backend:', error);\n      return null;\n    }\n  };\n\n  // Load user data from localStorage or API\n  useEffect(() => {\n    const loadUserData = async () => {\n      const userData = JSON.parse(localStorage.getItem('user') || '{}');\n      setCurrentUser(userData);\n\n      // Get user's role permissions\n      if (userData.role) {\n        const permissions = [userData.role] || {};\n        setUserPermissions(permissions);\n      }\n\n      // Try to fetch from backend first\n      const backendUsers = await fetchUsersFromBackend();\n      if (backendUsers && backendUsers.length > 0) {\n        setUsers(backendUsers);\n        localStorage.setItem('usersData', JSON.stringify(backendUsers));\n      } else {\n        // Fall back to local data\n        const storedUsers = JSON.parse(localStorage.getItem('usersData') || '[]');\n        setUsers(storedUsers);\n      }\n    };\n    loadUserData();\n  }, []);\n\n  // Check if user has permission for a module\n  const hasPermission = module => {\n    var _users$find;\n    if (!currentUser || !currentUser.role) return false;\n\n    // Admin has access to everything\n    if (currentUser.role === 'Admin') return true;\n\n    // Check specific user permissions (overrides)\n    const userSpecificPermissions = (_users$find = users.find(u => u.id === currentUser.id)) === null || _users$find === void 0 ? void 0 : _users$find.permissions;\n    if (userSpecificPermissions && userSpecificPermissions.hasOwnProperty(module)) {\n      return userSpecificPermissions[module];\n    }\n\n    // Check default role permissions\n    return userPermissions[module] || false;\n  };\n\n  // Update user permissions (admin function)\n  const updateUserPermissions = async (userId, permissions) => {\n    try {\n      const token = localStorage.getItem('token');\n      if (token) {\n        // Update on backend\n        await api.put(`/users/${userId}/permissions`, {\n          permissions\n        });\n      }\n\n      // Update local state\n      const updatedUsers = users.map(user => {\n        if (user.id === userId) {\n          return {\n            ...user,\n            permissions: {\n              ...user.permissions,\n              ...permissions\n            }\n          };\n        }\n        return user;\n      });\n      setUsers(updatedUsers);\n      localStorage.setItem('usersData', JSON.stringify(updatedUsers));\n      return {\n        success: true\n      };\n    } catch (error) {\n      var _error$response, _error$response$data;\n      console.error('Error updating user permissions:', error);\n      return {\n        success: false,\n        error: ((_error$response = error.response) === null || _error$response === void 0 ? void 0 : (_error$response$data = _error$response.data) === null || _error$response$data === void 0 ? void 0 : _error$response$data.message) || error.message\n      };\n    }\n  };\n\n  // Get user permissions\n  const getUserPermissions = userId => {\n    const user = users.find(u => u.id === userId);\n    return user ? user.permissions : {};\n  };\n\n  // Update user role (admin function)\n  const updateUserRole = async (userId, newRole, newStatus = null) => {\n    try {\n      const token = localStorage.getItem('token');\n\n      // Check if we're using demo data (string IDs) vs real backend data (ObjectIds)\n      const isDemoData = typeof userId === 'string' && /^[0-9]+$/.test(userId);\n      if (token && !isDemoData) {\n        // Try to update on backend first (only for real backend data)\n        try {\n          const updateData = {\n            role: newRole\n          };\n          if (newStatus) {\n            updateData.status = newStatus;\n          }\n          await api.put(`/users/${userId}`, updateData);\n        } catch (apiError) {\n          var _apiError$response;\n          // If the endpoint doesn't exist (404), log and continue with local update\n          if (((_apiError$response = apiError.response) === null || _apiError$response === void 0 ? void 0 : _apiError$response.status) === 404) {\n            console.log('User update endpoint not found, updating locally only');\n            // The local state will still be updated below\n          } else {\n            throw apiError; // Re-throw if it's a different error\n          }\n        }\n      }\n\n      // Update local state\n      const updatedUsers = users.map(user => {\n        if (user.id === userId) {\n          const updatedUser = {\n            ...user,\n            role: newRole\n          };\n          if (newStatus) {\n            updatedUser.status = newStatus;\n          }\n          return updatedUser;\n        }\n        return user;\n      });\n      setUsers(updatedUsers);\n      localStorage.setItem('usersData', JSON.stringify(updatedUsers));\n      return {\n        success: true\n      };\n    } catch (error) {\n      var _error$response2, _error$response2$data;\n      console.error('Error updating user role:', error);\n\n      // Still update locally as fallback\n      const updatedUsers = users.map(user => {\n        if (user.id === userId) {\n          const updatedUser = {\n            ...user,\n            role: newRole\n          };\n          if (newStatus) {\n            updatedUser.status = newStatus;\n          }\n          return updatedUser;\n        }\n        return user;\n      });\n      setUsers(updatedUsers);\n      localStorage.setItem('usersData', JSON.stringify(updatedUsers));\n      return {\n        success: false,\n        error: ((_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : (_error$response2$data = _error$response2.data) === null || _error$response2$data === void 0 ? void 0 : _error$response2$data.message) || error.message\n      };\n    }\n  };\n\n  // Get all users with their permissions\n  const getAllUsersWithPermissions = () => {\n    return users.map(user => ({\n      ...user,\n      permissions: user.permissions || {}\n    }));\n  };\n  const value = {\n    currentUser,\n    userPermissions,\n    users,\n    hasPermission,\n    updateUserRole,\n    updateUserPermissions,\n    getUserPermissions,\n    getAllUsersWithPermissions,\n    setUsers,\n    fetchUsersFromBackend,\n    MODULES\n  };\n  return /*#__PURE__*/_jsxDEV(RoleContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 261,\n    columnNumber: 5\n  }, this);\n};\n_s2(RoleProvider, \"+0Q8QhiFZmNHXuseMbuiXBC9h/s=\");\n_c = RoleProvider;\nexport default RoleContext;\nvar _c;\n$RefreshReg$(_c, \"RoleProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","api","jsxDEV","_jsxDEV","RoleContext","useRole","_s","context","Error","MODULES","DASHBOARD","DATA_CENTER","PROJECTS","DIGITAL_MEDIA","TEAM_COMMUNICATION","MARKETING","HR_MANAGEMENT","FINANCE_MANAGEMENT","SEO_MANAGEMENT","INTERNAL_POLICIES","SETTINGS_CONFIG","RoleProvider","children","_s2","userPermissions","setUserPermissions","users","setUsers","currentUser","setCurrentUser","fetchUsersFromBackend","token","localStorage","getItem","response","get","console","log","data","transformedUsers","map","user","roleDefaultPermissions","role","mergedPermissions","permissions","Object","keys","forEach","key","undefined","id","_id","name","username","email","status","access","error","loadUserData","userData","JSON","parse","backendUsers","length","setItem","stringify","storedUsers","hasPermission","module","_users$find","userSpecificPermissions","find","u","hasOwnProperty","updateUserPermissions","userId","put","updatedUsers","success","_error$response","_error$response$data","message","getUserPermissions","updateUserRole","newRole","newStatus","isDemoData","test","updateData","apiError","_apiError$response","updatedUser","_error$response2","_error$response2$data","getAllUsersWithPermissions","value","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/aaravpanwar/noxtmstudio/Frontend/src/contexts/RoleContext.js"],"sourcesContent":["import React, { createContext, useContext, useState, useEffect } from 'react';\nimport api from '../config/api';\n\nconst RoleContext = createContext();\n\nexport const useRole = () => {\n  const context = useContext(RoleContext);\n  if (!context) {\n    throw new Error('useRole must be used within a RoleProvider');\n  }\n  return context;\n};\n\n// Define available modules/sections\nexport const MODULES = {\n  DASHBOARD: 'dashboard',\n  DATA_CENTER: 'dataCenter',\n  PROJECTS: 'projects',\n  DIGITAL_MEDIA: 'digitalMediaManagement',\n  TEAM_COMMUNICATION: 'teamCommunication',\n  MARKETING: 'marketing',\n  HR_MANAGEMENT: 'hrManagement',\n  FINANCE_MANAGEMENT: 'financeManagement',\n  SEO_MANAGEMENT: 'seoManagement',\n  INTERNAL_POLICIES: 'internalPolicies',\n  SETTINGS_CONFIG: 'settingsConfiguration'\n};\n\n// Simplified: No default role permissions - all permissions are manual\n\nexport const RoleProvider = ({ children }) => {\n  const [userPermissions, setUserPermissions] = useState({});\n  const [users, setUsers] = useState([]);\n  const [currentUser, setCurrentUser] = useState(null);\n\n  // Fetch users from backend\n  const fetchUsersFromBackend = async () => {\n    try {\n      const token = localStorage.getItem('token');\n      if (!token) return null;\n      \n      const response = await api.get('/users');\n      \n      console.log('Fetched users from backend:', response.data.users);\n      \n      // Transform backend data to match frontend format\n      const transformedUsers = response.data.users.map(user => {\n        // Get default permissions for the user's role\n        const roleDefaultPermissions = [user.role] || {};\n        \n        // Merge backend permissions with role defaults\n        // Backend permissions override role defaults\n        const mergedPermissions = { ...roleDefaultPermissions };\n        \n        // Apply user-specific permissions from backend\n        if (user.permissions) {\n          Object.keys(user.permissions).forEach(key => {\n            // Only override if the permission is explicitly set in backend\n            if (user.permissions[key] !== undefined && user.permissions[key] !== null) {\n              mergedPermissions[key] = user.permissions[key];\n            }\n          });\n        }\n        \n        return {\n          id: user._id,\n          name: user.username,\n          email: user.email,\n          role: user.role,\n          status: user.status || 'Active',\n          access: user.access || [],\n          permissions: mergedPermissions\n        };\n      });\n      \n      console.log('Transformed users:', transformedUsers);\n      \n      return transformedUsers;\n    } catch (error) {\n      console.error('Error fetching users from backend:', error);\n      return null;\n    }\n  };\n\n  // Load user data from localStorage or API\n  useEffect(() => {\n    const loadUserData = async () => {\n      const userData = JSON.parse(localStorage.getItem('user') || '{}');\n      setCurrentUser(userData);\n      \n      // Get user's role permissions\n      if (userData.role) {\n        const permissions = [userData.role] || {};\n        setUserPermissions(permissions);\n      }\n      \n      // Try to fetch from backend first\n      const backendUsers = await fetchUsersFromBackend();\n      \n      if (backendUsers && backendUsers.length > 0) {\n        setUsers(backendUsers);\n        localStorage.setItem('usersData', JSON.stringify(backendUsers));\n      } else {\n        // Fall back to local data\n        const storedUsers = JSON.parse(localStorage.getItem('usersData') || '[]');\n        setUsers(storedUsers);\n      }\n    };\n    \n    loadUserData();\n  }, []);\n\n  // Check if user has permission for a module\n  const hasPermission = (module) => {\n    if (!currentUser || !currentUser.role) return false;\n    \n    // Admin has access to everything\n    if (currentUser.role === 'Admin') return true;\n    \n    // Check specific user permissions (overrides)\n    const userSpecificPermissions = users.find(u => u.id === currentUser.id)?.permissions;\n    if (userSpecificPermissions && userSpecificPermissions.hasOwnProperty(module)) {\n      return userSpecificPermissions[module];\n    }\n    \n    // Check default role permissions\n    return userPermissions[module] || false;\n  };\n\n\n  // Update user permissions (admin function)\n  const updateUserPermissions = async (userId, permissions) => {\n    try {\n      const token = localStorage.getItem('token');\n      \n      if (token) {\n        // Update on backend\n        await api.put(`/users/${userId}/permissions`, { permissions });\n      }\n      \n      // Update local state\n      const updatedUsers = users.map(user => {\n        if (user.id === userId) {\n          return { ...user, permissions: { ...user.permissions, ...permissions } };\n        }\n        return user;\n      });\n      \n      setUsers(updatedUsers);\n      localStorage.setItem('usersData', JSON.stringify(updatedUsers));\n      \n      return { success: true };\n    } catch (error) {\n      console.error('Error updating user permissions:', error);\n      return { \n        success: false, \n        error: error.response?.data?.message || error.message \n      };\n    }\n  };\n\n\n  // Get user permissions\n  const getUserPermissions = (userId) => {\n    const user = users.find(u => u.id === userId);\n    return user ? user.permissions : {};\n  };\n\n  // Update user role (admin function)\n  const updateUserRole = async (userId, newRole, newStatus = null) => {\n    try {\n      const token = localStorage.getItem('token');\n      \n      // Check if we're using demo data (string IDs) vs real backend data (ObjectIds)\n      const isDemoData = typeof userId === 'string' && /^[0-9]+$/.test(userId);\n      \n      if (token && !isDemoData) {\n        // Try to update on backend first (only for real backend data)\n        try {\n          const updateData = { role: newRole };\n          if (newStatus) {\n            updateData.status = newStatus;\n          }\n          await api.put(`/users/${userId}`, updateData);\n        } catch (apiError) {\n          // If the endpoint doesn't exist (404), log and continue with local update\n          if (apiError.response?.status === 404) {\n            console.log('User update endpoint not found, updating locally only');\n            // The local state will still be updated below\n          } else {\n            throw apiError; // Re-throw if it's a different error\n          }\n        }\n      }\n      \n      // Update local state\n      const updatedUsers = users.map(user => {\n        if (user.id === userId) {\n          const updatedUser = { ...user, role: newRole };\n          if (newStatus) {\n            updatedUser.status = newStatus;\n          }\n          return updatedUser;\n        }\n        return user;\n      });\n      \n      setUsers(updatedUsers);\n      localStorage.setItem('usersData', JSON.stringify(updatedUsers));\n      \n      return { success: true };\n    } catch (error) {\n      console.error('Error updating user role:', error);\n      \n      // Still update locally as fallback\n      const updatedUsers = users.map(user => {\n        if (user.id === userId) {\n          const updatedUser = { ...user, role: newRole };\n          if (newStatus) {\n            updatedUser.status = newStatus;\n          }\n          return updatedUser;\n        }\n        return user;\n      });\n      \n      setUsers(updatedUsers);\n      localStorage.setItem('usersData', JSON.stringify(updatedUsers));\n      \n      return { \n        success: false, \n        error: error.response?.data?.message || error.message \n      };\n    }\n  };\n\n\n  // Get all users with their permissions\n  const getAllUsersWithPermissions = () => {\n    return users.map(user => ({\n      ...user,\n      permissions: user.permissions || {}\n    }));\n  };\n\n  const value = {\n    currentUser,\n    userPermissions,\n    users,\n    hasPermission,\n    updateUserRole,\n    updateUserPermissions,\n    getUserPermissions,\n    getAllUsersWithPermissions,\n    setUsers,\n    fetchUsersFromBackend,\n    MODULES\n  };\n\n  return (\n    <RoleContext.Provider value={value}>\n      {children}\n    </RoleContext.Provider>\n  );\n};\n\nexport default RoleContext;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}